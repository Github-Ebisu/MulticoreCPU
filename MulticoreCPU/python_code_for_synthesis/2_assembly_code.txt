CLAC;

LDIAC;
1;//addresss of b
MV_RL_AC;

LDIAC;
3;//start address of P
MV_RP_AC;

LDIAC;
4;//start address of Q
MV_RQ_AC;

LDIAC;//set current P,Q,R
3;//start address of P
MV_R_AC;
STIR;
9;//current address of P

LDIAC;
4;//start address of Q
MV_R_AC;
STIR;
10;//current address of Q

LDIAC;
5;//start address of R
MV_R_AC;
STIR;
11;//current address of R

CLAC;
MV_R_AC;
MV_RC_AC;

MV_AC_RP;//loop starts
LDAC;
MV_R1_AC;

MV_AC_RQ;
LDAC;

MUL;                                // AC * R1 (P[0,0] x Q[0,0])
ADD;                                // sum = AC = AC + R (R = 0)
MV_R_AC;                            // R <- sum 

MV_AC_RL;   
SUB;                                // AC = result = b - RC(RC = 0) 
JMPNZ;                              // AC = result = 0 => z = 1
28;//loop again

LDIAC;  
11;                                 // current address of R / c
STR;                                // dataMem[crr_R] = R = sum

INCAC;                              // AC = crr_R + 1 
MV_R_AC;                            // R = crr_R + 1
STIR;                               // dataMem[11] = crr_R + 1
11;//current addressof R

MV_AC_RQ;   
MV_RC_AC;                           // RC <- addr_Q
LDIAC;                              // AC <- end_Q
7;// end address of Q

INCAC; // this is because current Q is increased by one | AC <- end_Q + 1
SUB;                               // AC = end_Q - start_Q
JMPNZ;                            // AC = 0 => z = 1 => jump 57; else jump 62
57;// b != end
JUMP;
62;//b == end

LDIAC;   //  b!=end starts here
9;                               //  current address of P, AC <-  crr_P
MV_RP_AC;                       // RP <- crr_P
JUMP;
25;// jump to CLAC before loop begin

MV_AC_RP;//b==end starts here       
MV_R_AC;//to store current P value
STIR;
9;// current address of P       // dataMem[crr_P] = RP = crr_P

MV_RC_AC;//to subtract          // RC <- crr_P
LDIAC;
6;//end address P               // AC <- end_P
INCAC;                          // AC <- end_P + 1
SUB;                            // result = AC = AC - RC = Matrix P
JMPNZ;                          // result = 0 => z = 1 => Jump 75 else Jump 80
75;// jump to a != end
JUMP;
80;// jump to a == end

LDIAC;//a!=end starts here      // crr_P != end_P + 1
4;//start address Q             
MV_RQ_AC;                       // RQ <- start_Q
JUMP;
25;// jump to CLAC before loop begin

ENDOP;//a==end starts here







